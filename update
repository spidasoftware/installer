#!/bin/bash

####################################################################################
# Vars
####################################################################################
dockerUsername=""
dockerEmail=""
dockerPassword=""
dockerComposeFile=/var/lib/spida/docker-compose.yml

####################################################################################
# Parses Args
####################################################################################
function parseCommandLineArguments() {
  while [ $# -gt 0 ]
  do
      case "$1" in
          --username)  dockerUsername="$2"; shift;;
          --email)  dockerEmail="$2"; shift;;
          --password)  dockerPassword="$2"; shift;;
          *)
              echo >&2 \
              "usage: $0 [--username dockerHubUsername] [--email dockerHubEmail] [--password dockerHubPassword]
                Options:
                  --username          dockerhub username (will prompt for username if argument is not passed)
                  --email             dockerhub email (will prompt for email if argument is not passed)
                  --password          dockerhub password (will prompt for email if argument is not passed)
              "
              exit 1;;
          *)  break;; # terminate while loop
      esac
      shift
  done
}

####################################################################################
# Logs in to Docker
####################################################################################
function dockerLogin() {
  if [[ "$dockerUsername" = "" ]]; then
    read -p "Docker username: " dockerUsername
  fi

  if [[ "$dockerEmail" = "" ]]; then
    read -p "Docker email: " dockerEmail
  fi

  if [[ "$dockerPassword" = "" ]]; then
  	read  -s -p "Docker password: " dockerPassword
  fi

  sudo docker login -u $dockerUsername -e $dockerEmail -p $dockerPassword
 
  if [ $? -ne 0 ]; then
    echo "login failed, exiting."
    exit 1
  fi

  
}

function parse_yaml() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

parseCommandLineArguments $@
dockerLogin

eval $(parse_yaml $dockerComposeFile)
if [[ "$apache_image" != "" ]]; then
  sudo docker pull $apache_image
fi

if [[ "$min_image" != "" ]]; then
  sudo docker pull $apache_image
fi
  
echo "stopping docker containers..."
sudo docker-compose -f $dockerComposeFile stop
echo "removing old docker containers..."
sudo docker-compose -f $dockerComposeFile rm --force
echo "updating docker containers..."
sudo docker-compose -f $dockerComposeFile pull
echo "starting new docker containers..."
sudo docker-compose -f $dockerComposeFile up -d

sudo docker logout
