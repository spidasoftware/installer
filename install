#!/bin/bash
  
####################################################################################
#
# Vars
#
####################################################################################
serverRoot=`hostname -f`
tag="latest"
dockerUsername=""
dockerPassword=""
databasePassword=""
mongoPassword=""
tomcatAdminPassword=""
defaultUserPassword=""
defaulUserApiToken=""
spidaMin=true
postgresql=true
mongo=true
dockerStart=true
hasDockerConfig=false
disableCountdown=false
backupDir="/apps/spidamin"
configDir="/etc/spida"
postgresqlTag="latest"
mongodbTag="latest"
redisTag="latest"
apacheTag="latest"
defaultApacheApp=""
sendgridApiKey=""
alertEmail=""

####################################################################################
#
# Parses Args
#
####################################################################################
function parseCommandLineArguments() {
  while [ $# -gt 0 ]
  do
      case "$1" in
          --tag) tag="$2"; shift;;
          --postgresqltag)  postgresqlTag="$2"; shift;;
          --mongodbtag)  mongodbTag="$2"; shift;;
          --redistag)  redisTag="$2"; shift;;
          --apachetag)  apacheTag="$2"; shift;;
          --serverroot)  serverRoot="$2"; shift;;
          --username)  dockerUsername="$2"; shift;;
          --password)  dockerPassword="$2"; shift;;
          --backupdir)  backupDir="$2"; shift;;
          --configdir)  configDir="$2"; shift;;
          --dbpassword)  databasePassword="$2"; shift;;
          --mongopassword)  mongoPassword="$2"; shift;;
          --tomcatpassword)  tomcatAdminPassword="$2"; shift;;
          --userpassword)  defaultUserPassword="$2"; shift;;
          --apitoken)  defaulUserApiToken="$2"; shift;;
          --no-spidamin)  spidaMin=false;;
          --no-postgresql)  postgresql=false;;
          --no-mongodb)  mongo=false;;
          --no-start) dockerStart=false;;
    		  --has-docker) hasDockerConfig=true;;
    		  --disable-countdown) disableCountdown=true;;
          --default-apache-app)  defaultApacheApp="$2"; shift;;
          --sendgrid-api-key) sendgridApiKey="$2"; shift;;
          --alert-email) alertEmail="$2"; shift;;
          *)
              echo >&2 \
              "usage: $0 [option value]
                Options:
                  --tag                 docker spidamin tag to deploy (defaults to latest)
                  --postgresqltag       docker postgresql tag to deploy (defaults to latest)
                  --mongodbtag          docker mongodb tag to deploy (defaults to latest)
                  --redistag            docker mongodb tag to deploy (defaults to latest)
                  --apachetag           docker apache tag to deploy (defaults to latest)
                  --username            dockerhub username (will prompt for username if argument is not passed)
                  --password            dockerhub password (will prompt for password if argument is not passed)
                  --serverroot          server root that you will navigate to view the application (ex: min.com)
                  --backupdir           directory for mongo data, postgres data, files and backups (defaults to $backupDir). This has to be backed up.
                  --configdir           directory for configuration and scripts (defaults to $configDir).
                  --dbpassword          database password
                  --mongopassword       mongodb password
                  --tomcatpassword      tomcat admin password
                  --userpassword        default spidamin user password
                  --no-spidamin         don't install spidamin
                  --no-postgresql       don't install postgresql
                  --no-mongodb          don't install mongodb
				          --no-start            don't start any docker containers
				          --has-docker          look for existing docker-compose.yml
				          --disable-countdown   turn off countdown jobs
                  --default-apache-app  default apache app to redirect to (defaults to projectmanager)
                  --sendgrid-api-key)   sendgrid apikey that will be used to send emails when there is an error in a cron backup job
                  --alert-email)        email address to send alerts to when a backup job fails
              "
              exit 1;;
          *)  break;; # terminate while loop
      esac
      shift
  done

  if [[ ! -d "$backupDir" ]]; then
    echo "$backupDir does not exist, exiting"
    exit 1
  fi

  echo "--------------------------------------------------------------------------------------"
  echo "Data and files will be stored in ${backupDir}. You must take backups of this location."
  echo "--------------------------------------------------------------------------------------"
}


####################################################################################
#
# Installs Docker
#
####################################################################################
function installDocker() {
  curl -sSL https://get.docker.com/ | sh
  curl -L https://github.com/docker/compose/releases/download/1.7.0/docker-compose-`uname -s`-`uname -m` > /usr/bin/docker-compose
  chmod +x /usr/bin/docker-compose
  if [[ -f "/etc/redhat-release" ]]; then
    sudo mkdir /etc/systemd/system/docker.service.d
    sudo touch /etc/systemd/system/docker.service.d/docker.conf
    echo "[Service]
ExecStart=
ExecStart=/usr/bin/docker daemon -H fd:// --storage-opt dm.basesize=50G" > /etc/systemd/system/docker.service.d/docker.conf
    sudo systemctl daemon-reload
  fi
  sudo service docker start
}


####################################################################################
#
# Logs in to Docker
#
####################################################################################
function dockerLogin() {
  if [[ "$dockerUsername" = "" ]]; then
    read -p "Docker username: " dockerUsername
  fi

  if [[ "$dockerPassword" = "" ]]; then
  	read  -s -p "Docker password: " dockerPassword
  fi

  sudo docker login -u $dockerUsername -p "$dockerPassword"

  if [ $? -ne 0 ]; then
    echo "login failed, exiting."
    exit 1
  fi
}


####################################################################################
#
# Generates docker-compose.yml
#
####################################################################################
function createDockerComposeFile() {
  echo "Creating the docker-compose.yml file"
  needEnvFile=false
  if [[ "$databasePassword" != "" || "$mongoPassword" != "" || "$tomcatAdminPassword" != "" || "$defaultUserPassword" != "" || "$defaulUserApiToken" != "" || "$sendgridApiKey" != "" || "$alertEmail" != "" ]]; then
    needEnvFile=true
  fi

  dockerComposeFile=$configDir/docker-compose.yml
  dockerEnvFile=$configDir/.docker-common.env
  mkdir -p $configDir
  sudo rm -f $dockerComposeFile
  sudo touch $dockerComposeFile

  if [[ $needEnvFile = true ]]; then
    sudo rm -f $dockerEnvFile
    sudo touch $dockerEnvFile
    if [[ -n "$databasePassword" ]]; then
      echo "DATABASE_PASSWORD=$databasePassword" >> $dockerEnvFile
      echo "POSTGRES_PASSWORD=$databasePassword" >> $dockerEnvFile
    fi
    if [[ -n "$mongoPassword" ]]; then
      echo "MONGODB_PASSWORD=$mongoPassword" >> $dockerEnvFile
    fi
    if [[ -n "$tomcatAdminPassword" ]]; then
      echo "TOMCAT_PASSWORD=$tomcatAdminPassword" >> $dockerEnvFile
    fi
    if [[ -n "$defaultUserPassword" ]]; then
      echo "ADMIN_USER_PASSWORD=$defaultUserPassword" >> $dockerEnvFile
    fi
    if [[ -n "$defaulUserApiToken" ]]; then
      echo "ADMIN_API_TOKEN=$defaulUserApiToken" >> $dockerEnvFile
    fi
  	if [[ -n "$disableCountdown" ]]; then
  	  echo "COUNTDOWN_DISABLED='true'" >> $dockerEnvFile
  	fi
    if [[ -n "$sendgridApiKey" ]]; then
      echo "BACKUP_JOBS_SENDGRID_API_KEY=${sendgridApiKey}" >> $dockerEnvFile
    fi
     if [[ -n "$alertEmail" ]]; then
      echo "ALERT_EMAIL=${alertEmail}" >> $dockerEnvFile
    fi
  fi

  # setup mongo data dir, postgres data dir files dir and backsup dir
  filesDir="${backupDir}/files"
  postgresBackupDir="${backupDir}/postgresBackups"
  mongoBackupDir="${backupDir}/mongoBackups"
  mongoDataDir="${backupDir}/mongoData"
  postgresDataDir="${backupDir}/postgresData"
  apachessl="${backupDir}/apachessl"
  geoserver="${backupDir}/geoserver"
  tomcatLogs="${backupDir}/logs/tomcat"
  spidaLogs="${backupDir}/logs/spida"
  apacheLogs="${backupDir}/logs/apache"
  mkdir -p $filesDir $postgresBackupDir $mongoBackupDir $mongoDataDir $postgresDataDir $apachessl $geoserver $tomcatLogs $spidaLogs $apacheLogs

  HOST_MACHINE_HOST_NAME=`hostname -f`
  if [[ $spidaMin = true ]]; then
    echo "spidamin:
  image: spidasoftware/min:$tag
  restart: always
  volumes:
    - $filesDir:/var/lib/spida/files
    - $geoserver:/var/lib/spida/geoserver
    - $tomcatLogs:/usr/local/tomcat/logs
    - $spidaLogs:/var/lib/spida/logs
  environment:
    - HOST_MACHINE_HOST_NAME=$HOST_MACHINE_HOST_NAME" >> $dockerComposeFile

    if [[ "$serverRoot" != "" ]]; then
      echo "    - SERVER_ROOT=$serverRoot" >> $dockerComposeFile
    fi

    if [[ $needEnvFile = true ]]; then
      echo "  env_file: $dockerEnvFile" >> $dockerComposeFile
    fi

    echo "  links:" >> $dockerComposeFile
    echo "    - redis" >> $dockerComposeFile
    if [[ $postgresql = true ]]; then
      echo "    - postgresql" >> $dockerComposeFile
    fi
    if [[ $mongo = true ]]; then
      echo "    - mongodb" >> $dockerComposeFile
    fi
  fi

  if [[ $postgresql = true ]]; then
    POSTGRES_HOSTNAME="postgresql.${HOST_MACHINE_HOST_NAME}"
    if [[ "$serverRoot" != "" ]]; then
      POSTGRES_HOSTNAME="postgresql.${serverRoot}"
    fi
    echo "postgresql:
  image: spidasoftware/postgresql:$postgresqlTag
  restart: always
  hostname: $POSTGRES_HOSTNAME
  volumes:
    - $postgresBackupDir:/backups
    - $postgresDataDir:/var/lib/postgresql/data" >> $dockerComposeFile
      if [[ $needEnvFile = true ]]; then
        echo "  env_file: $dockerEnvFile" >> $dockerComposeFile
      fi
  fi

  if [[ $mongo = true ]]; then
    MONGODB_HOSTNAME="mongodb.${HOST_MACHINE_HOST_NAME}"
    if [[ "$serverRoot" != "" ]]; then
      MONGODB_HOSTNAME="mongodb.${serverRoot}"
    fi
    echo "mongodb:
  image: spidasoftware/mongodb:$mongodbTag
  restart: always
  hostname: $MONGODB_HOSTNAME
  volumes:
    - $mongoBackupDir:/backups
    - $mongoDataDir:/data/db" >> $dockerComposeFile
      if [[ $needEnvFile = true ]]; then
        echo "  env_file: $dockerEnvFile" >> $dockerComposeFile
      fi
  fi

  if [[ $spidaMin = true ]]; then
    echo "redis:
  image: spidasoftware/redis:$redisTag
  restart: always" >> $dockerComposeFile

    echo "apache:
  image: spidasoftware/apache:$apacheTag
  restart: always
  links:
    - spidamin
  ports:
    - \"80:80\"
    - \"443:443\"
  volumes:
    - $apachessl:/var/lib/spida/apache_ssl
    - $apacheLogs:/var/log/apache2
  environment:
    - HOST_MACHINE_HOST_NAME=$HOST_MACHINE_HOST_NAME" >> $dockerComposeFile

    if [[ "$serverRoot" != "" ]]; then
      echo "    - SERVER_ROOT=$serverRoot" >> $dockerComposeFile
    fi
    if [[ "$defaultApacheApp" != "" ]]; then
      echo "    - DEFAULT_APP_NAME=$defaultApacheApp" >> $dockerComposeFile
    fi
  fi
}

####################################################################################
#
# Updates docker-compose.yml
#
####################################################################################
function updateDockerComposeFile() {
  dockerComposeFile=$configDir/docker-compose.yml
  HOST_MACHINE_HOST_NAME=`hostname -f`

  #We may still want to override the COUNTDOWN_DISABLED var
  dockerEnvFile=$configDir/.docker-common.env
  sed -i '/COUNTDOWN_DISABLED/d' $dockerEnvFile
  if [[ $disableCountdown = true ]]; then
    echo "COUNTDOWN_DISABLED='true'" >> $dockerEnvFile
  fi

  unset dockerEnvFile
  
  # Update the server root and the host machine
  sed -i "s/\s*- SERVER_ROOT=\S*$/    - SERVER_ROOT=${serverRoot}/g" $dockerComposeFile
  sed -i "s/\s*- HOST_MACHINE_HOST_NAME=\S*$/    - HOST_MACHINE_HOST_NAME=${HOST_MACHINE_HOST_NAME}/g" $dockerComposeFile

  # Update the docker image tags, if they were passed in, they aren't latest.
  if [ "$tag" != "latest" ]; then
    sed -i "s/spidasoftware\/min:\S*$/spidasoftware\/min:$tag/g" $dockerComposeFile
  fi
  if [ "$postgresqlTag" != "latest" ]; then
    sed -i "s/spidasoftware\/postgresql:\S*$/spidasoftware\/postgresql:${postgresqlTag}/" $dockerComposeFile
  fi
  if [ "$mongodbTag" != "latest" ]; then
    sed -i "s/spidasoftware\/mongodb:\S*$/spidasoftware\/mongodb:${mongodbTag}/" $dockerComposeFile
  fi
  if [ "$redisTag" != "latest" ]; then
    sed -i "s/spidasoftware\/redis:\S*$/spidasoftware\/redis:${redisTag}/" $dockerComposeFile
  fi
  if [ "$apacheTag" != "latest" ]; then
    sed -i "s/spidasoftware\/apache:\S*$/spidasoftware\/apache:${apacheTag}/" $dockerComposeFile
  fi

  POSTGRES_HOSTNAME="postgresql.${HOST_MACHINE_HOST_NAME}"
  if [[ "$serverRoot" != "" ]]; then
    POSTGRES_HOSTNAME="postgresql.${serverRoot}"
  fi
  sed -i "s/\s*hostname: postgresql\.\S*/  hostname: ${POSTGRES_HOSTNAME}/" $dockerComposeFile

  MONGODB_HOSTNAME="mongodb.${HOST_MACHINE_HOST_NAME}"
  if [[ "$serverRoot" != "" ]]; then
    MONGODB_HOSTNAME="mongodb.${serverRoot}"
  fi
  sed -i "s/\s*hostname: mongodb\.\S*/  hostname: ${MONGODB_HOSTNAME}/" $dockerComposeFile
}

####################################################################################
#
# Setup docker container log rotation
#
####################################################################################
function setupLogRotate() {
  sudo touch /etc/logrotate.d/docker-container
  echo "/var/lib/docker/containers/*/*.log {
  rotate 7
  daily
  compress
  size=1G
  missingok
  copytruncate
}" >> /etc/logrotate.d/docker-container
}
####################################################################################
#
# Execute above functions
#
####################################################################################
parseCommandLineArguments $@
installDocker
dockerLogin
if [ $hasDockerConfig = false -o ! \( -f $configDir/docker-compose.yml -a -f $configDir/.docker-common.env \) ]; then
	createDockerComposeFile
else
  updateDockerComposeFile
fi
setupLogRotate

if [ $dockerStart = true ]; then
	dockerComposeFile=$configDir/docker-compose.yml
	sudo docker-compose -f $dockerComposeFile up -d
else
	sudo docker-compose -f $dockerComposeFile pull
fi
sudo docker logout
