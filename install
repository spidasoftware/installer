#!/bin/bash

####################################################################################
#
# Vars
# 
####################################################################################
serverRoot=`hostname -f`
tag="latest"
dockerUsername=""
dockerEmail=""
dockerPassword=""
databasePassword=""
mongoPassword=""
tomcatAdminPassword=""
defaultUserPassword=""
spidaMin=true
postrgresql=true
mongo=true
backupDir="/apps/spidamin"
apacheTag="latest"


####################################################################################
#
# Parses Args
# 
####################################################################################
function parseCommandLineArguments() {
  while [ $# -gt 0 ]
  do
      case "$1" in
          --tag) tag="$2"; shift;;
          --apachetag)  apacheTag="$2"; shift;;
          --serverroot)  serverRoot="$2"; shift;;
          --username)  dockerUsername="$2"; shift;;
          --email)  dockerEmail="$2"; shift;;
          --password)  dockerPassword="$2"; shift;;
          --backupdir)  backupDir="$2"; shift;;
          --dbpassword)  databasePassword="$2"; shift;;
          --mongopassword)  mongoPassword="$2"; shift;;
          --tomcatpassword)  tomcatAdminPassword="$2"; shift;;
          --userpassword)  defaultUserPassword="$2"; shift;;
          --no-spidamin)  spidaMin=false;;
          --no-postgresql)  postrgresql=false;;
          --no-mongodb)  mongo=false;;
          *)
              echo >&2 \
              "usage: $0 [--tag tag] [--apachetag apachetag] [--username dockerHubUsername] [--email dockerHubEmail] [--password dockerHubPassword] [--serverroot serverRoot] [--filesdir filesdir] [--dbpassword dbpassword] [--mongopassword mongopassword] [--tomcatpassword tomcatpassword] [--mongobackupdir mongobackupdir] [--postgresbackupdir postgresbackupdir] [--mongodatadir mongodatadir] [--no-spidamin] [--userpassword userpassword] [--no-postgresql] [--no-mongodb]
                Options:
                  --tag               docker spidamin tag to deploy (defaults to latest)
                  --apachetag         docker apache tag to deploy (defaults to latest)
                  --username          dockerhub username (will prompt for username if argument is not passed)
                  --email             dockerhub email (will prompt for email if argument is not passed)
                  --password          dockerhub password (will prompt for email if argument is not passed)
                  --serverroot        server root that you will navigate to view the application (ex: min.com)  
                  --backupdir         directory for mongo data, postgres data, files and backups (defaults to /apps/spidamin). This has to be backed up.
                  --dbpassword        database password
                  --mongopassword     mongodb password
                  --tomcatpassword    tomcat admin password
                  --userpassword      default spidamin user password
                  --no-spidamin       don't install spidamin
                  --no-postgresql     don't install postgresql
                  --no-mongodb        don't install mongodb 
              "
              exit 1;;
          *)  break;; # terminate while loop
      esac
      shift
  done

  if [[ ! -d "$backupDir" ]]; then
    echo "$backupDir does not exist, exiting"
    exit 1
  fi

  echo "--------------------------------------------------------------------------------------"
  echo "Data and files will be stored in ${backupDir}. You must take backups of this location."
  echo "--------------------------------------------------------------------------------------"
}


####################################################################################
#
# Installs Docker
# 
####################################################################################
function installDocker() {
  OS=`cat /etc/issue`

  # cat /etc/issue wasn't working for RHEL 7+ on google compute. So if /etc/redhat-release exists then use that.
  if [[ -f "/etc/redhat-release" ]]; then
    OS=`cat /etc/redhat-release`
  fi
  
  VERSION=$(egrep -o "[0-9]{1,}\.[0-9]{1,}" <<< "$OS")

  if [[ $OS == *"Ubuntu"* ]]; then
    echo "Ubuntu $VERSION"
    if(( $(bc <<< "$VERSION < 14.0") == 1 )); then
      echo "$VERSION is not a supported Ubuntu Version, need > 14.04"
      exit 1
    else
      sudo docker --version
      if [ $? -ne 0 ]; then
        echo "docker not installed...installing"
        # Check that HTTPS transport is available to APT
        if [ ! -e /usr/lib/apt/methods/https ]; then
          sudo apt-get update
          sudo apt-get install -y apt-transport-https
        fi

        # Install docker
        wget -qO- https://get.docker.com/ | sudo sh
        sudo source /etc/bash_completion.d/docker.io 

        sudo docker --version
      fi
    fi
  elif [[ $OS == *"Red Hat Enterprise Linux Server"* ]]; then
    echo "RHEL $VERSION"
    sudo yum -y update

    if(( $(bc <<< "$VERSION < 6.5") == 1 )); then
      echo "$VERSION is not a supported RHEL Version, need > 6.5"
      exit 1
    fi

    sudo docker --version
    if [ $? -ne 0 ]; then
      echo "docker not installed...installing"
      if(( $(bc <<< "$VERSION > 6.99") == 1 )); then
        # 7.0 plus
        sudo subscription-manager repos --enable=rhel-7-server-extras-rpms
        sudo yum -y install docker
      else
        # 6.5 but less than 7 
        wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
        sudo rpm -Uvh epel-release-6*.rpm
        sudo rm -f epel-release-6*.rpm
        sudo yum -y remove docker
        sudo yum -y install docker-io
        sudo yum -y update docker-io
      fi
      sudo docker --version
    fi

    #Start the service
    sudo service docker start
    sudo chkconfig docker on
  else
    echo "$OS is not a supported OS"
    exit 1
  fi

  sudo docker-compose --version
  if [ $? -ne 0 ]; then
    echo "docker-compose not installed...installing"
    sudo curl -L https://github.com/docker/compose/releases/download/1.1.0/docker-compose-`uname -s`-`uname -m` > docker-compose
    sudo mv docker-compose /usr/bin/docker-compose
    sudo chmod +x /usr/bin/docker-compose

    docker-compose --version
  fi
}


####################################################################################
#
# Logs in to Docker
# 
####################################################################################
function dockerLogin() {
  if [[ "$dockerUsername" = "" ]]; then
    read -p "Docker username: " dockerUsername
  fi

  if [[ "$dockerEmail" = "" ]]; then
    read -p "Docker email: " dockerEmail
  fi

  if [[ "$dockerPassword" = "" ]]; then
  	read  -s -p "Docker password: " dockerPassword
  fi

  sudo docker login -u $dockerUsername -e $dockerEmail -p $dockerPassword

  if [ $? -ne 0 ]; then
    echo "login failed, exiting."
    exit 1
  fi
}


####################################################################################
#
# Generates docker-compose.yml
# 
####################################################################################
function createDockerComposeFile() {
  echo "Creating the docker-compose.yml file"
  needEnvFile=false
  if [[ "$databasePassword" != "" || "$mongoPassword" != "" || "$tomcatAdminPassword" != "" || "$defaultUserPassword" != "" ]]; then
    needEnvFile=true
  fi

  dockerComposeFile=/var/lib/spida/docker-compose.yml
  dockerEnvFile=/var/lib/spida/.docker-common.env
  mkdir -p /var/lib/spida
  sudo rm -f $dockerComposeFile
  sudo touch $dockerComposeFile

  if [[ $needEnvFile = true ]]; then
    sudo rm -f $dockerEnvFile
    sudo touch $dockerEnvFile
    if [[ "$databasePassword" != "" ]]; then
      echo "DATABASE_PASSWORD=$databasePassword" >> $dockerEnvFile
      echo "POSTGRES_PASSWORD=$databasePassword" >> $dockerEnvFile
    fi
    if [[ "$mongoPassword" != "" ]]; then
      echo "MONGODB_PASSWORD=$mongoPassword" >> $dockerEnvFile
    fi
    if [[ "$tomcatAdminPassword" != "" ]]; then
      echo "TOMCAT_PASSWORD=$tomcatAdminPassword" >> $dockerEnvFile
    fi
    if [[ "$defaultUserPassword" != "" ]]; then
      echo "ADMIN_USER_PASSWORD=$defaultUserPassword" >> $dockerEnvFile
    fi
  fi

  # setup mongo data dir, postgres data dir files dir and backsup dir
  filesDir="${backupDir}/files"
  postgresBackupDir="${backupDir}/postgresBackups"
  mongoBackupDir="${backupDir}/mongoBackups"
  mongoDataDir="${backupDir}/mongoData"
  postgresDataDir="${backupDir}/postgresData"
  tomcatssl="${backupDir}/tomcatssl"
  apachessl="${backupDir}/apachessl"
  mkdir -p $filesDir $postgresBackupDir $mongoBackupDir $mongoDataDir $postgresDataDir $tomcatssl $apachessl

  HOST_MACHINE_HOST_NAME=`hostname -f`
  if [[ $spidaMin = true ]]; then
    echo "spidamin: 
  image: spidasoftware/min:$tag 
  restart: always
  volumes:
    - $filesDir:/var/lib/spida/files
    - $tomcatssl:/usr/local/tomcat/spidassl
  environment:
    - HOST_MACHINE_HOST_NAME=$HOST_MACHINE_HOST_NAME" >> $dockerComposeFile
    
    if [[ "$serverRoot" != "" ]]; then
      echo "    - SERVER_ROOT=$serverRoot" >> $dockerComposeFile
    fi
    
    if [[ $needEnvFile = true ]]; then
      echo "  env_file: $dockerEnvFile" >> $dockerComposeFile
    fi

    if [[ "$*" != *"--no-postgresql"* ]] || [[ "$*" != *"--no-mongodb"* ]] || [[ "$*" != *"--no-redis"* ]]; then
      echo "  links:" >> $dockerComposeFile
    fi
    if [[ "$*" != *"--no-postgresql"* ]]; then
      echo "    - postgresql" >> $dockerComposeFile
    fi
    if [[ "$*" != *"--no-mongodb"* ]]; then
      echo "    - mongodb" >> $dockerComposeFile
    fi
    if [[ "$*" != *"--no-redis"* ]]; then
      echo "    - redis" >> $dockerComposeFile
    fi
  fi

  if [[ $postrgresql = true ]]; then
    echo "postgresql: 
  image: spidasoftware/postgresql 
  restart: always
  volumes:
    - $postgresBackupDir:/backups
    - $postgresDataDir:/var/lib/postgresql/data" >> $dockerComposeFile
      if [[ $needEnvFile = true ]]; then
        echo "  env_file: $dockerEnvFile" >> $dockerComposeFile
      fi
  fi

  if [[ $mongo = true ]]; then
    echo "mongodb: 
  image: spidasoftware/mongodb 
  restart: always
  volumes:
    - $mongoBackupDir:/backups
    - $mongoDataDir:/data/db" >> $dockerComposeFile
      if [[ $needEnvFile = true ]]; then
        echo "  env_file: $dockerEnvFile" >> $dockerComposeFile
      fi
  fi

  if [[ $spidaMin = true ]]; then
    echo "redis: 
  image: spidasoftware/redis 
  restart: always" >> $dockerComposeFile

    echo "apache:
  image: spidasoftware/apache:$apacheTag
  restart: always
  links:
    - spidamin
  ports:
    - \"80:80\"
    - \"443:443\"
  volumes:
    - $apachessl:/var/lib/spida/apache_ssl
  environment:
    - HOST_MACHINE_HOST_NAME=$HOST_MACHINE_HOST_NAME" >> $dockerComposeFile
    
    if [[ "$serverRoot" != "" ]]; then
      echo "    - SERVER_ROOT=$serverRoot" >> $dockerComposeFile
    fi
  fi
}

# Work aroud for current but in dockercompose
function parseYaml() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

####################################################################################
#
# Execute above functions
# 
####################################################################################
parseCommandLineArguments $@
installDocker
dockerLogin
createDockerComposeFile

#Work around for docker compose pull from private repo with docker 1.7
eval $(parseYaml $dockerComposeFile)
if [[ "$apache_image" != "" ]]; then
  sudo docker pull $apache_image
fi

if [[ "$spidamin_image" != "" ]]; then
  sudo docker pull $spidamin_image
fi

sudo docker-compose -f $dockerComposeFile up -d
sudo docker logout
