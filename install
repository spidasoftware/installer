#!/bin/bash

####################################################################################
#
# Vars
#
####################################################################################
serverRoot=`hostname -f`
tag="latest"
dockerUsername=""
dockerEmail=""
dockerPassword=""
databasePassword=""
mongoPassword=""
tomcatAdminPassword=""
defaultUserPassword=""
defaulUserApiToken=""
spidaMin=true
postrgresql=true
mongo=true
backupDir="/var/spida"
configDir="/etc/spida"
apacheTag="latest"

####################################################################################
#
# Parses Args
#
####################################################################################
function parseCommandLineArguments() {
  while [ $# -gt 0 ]
  do
      case "$1" in
          --tag) tag="$2"; shift;;
          --apachetag)  apacheTag="$2"; shift;;
          --serverroot)  serverRoot="$2"; shift;;
          --username)  dockerUsername="$2"; shift;;
          --email)  dockerEmail="$2"; shift;;
          --password)  dockerPassword="$2"; shift;;
          --backupdir)  backupDir="$2"; shift;;
          --configdir)  configDir="$2"; shift;;
          --dbpassword)  databasePassword="$2"; shift;;
          --mongopassword)  mongoPassword="$2"; shift;;
          --tomcatpassword)  tomcatAdminPassword="$2"; shift;;
          --userpassword)  defaultUserPassword="$2"; shift;;
          --apitoken)  defaulUserApiToken="$2"; shift;;
          --no-spidamin)  spidaMin=false;;
          --no-postgresql)  postrgresql=false;;
          --no-mongodb)  mongo=false;;
          *)
              echo >&2 \
              "usage: $0 [option value]
                Options:
                  --tag               docker spidamin tag to deploy (defaults to latest)
                  --apachetag         docker apache tag to deploy (defaults to latest)
                  --username          dockerhub username (will prompt for username if argument is not passed)
                  --email             dockerhub email (will prompt for email if argument is not passed)
                  --password          dockerhub password (will prompt for email if argument is not passed)
                  --serverroot        server root that you will navigate to view the application (ex: min.com)
                  --backupdir         directory for mongo data, postgres data, files and backups (defaults to $backupDir). This has to be backed up.
                  --configdir         directory for configuration and scripts (defaults to $configDir).
                  --dbpassword        database password
                  --mongopassword     mongodb password
                  --tomcatpassword    tomcat admin password
                  --userpassword      default spidamin user password
                  --no-spidamin       don't install spidamin
                  --no-postgresql     don't install postgresql
                  --no-mongodb        don't install mongodb
              "
              exit 1;;
          *)  break;; # terminate while loop
      esac
      shift
  done

  if [[ ! -d "$backupDir" ]]; then
    echo "$backupDir does not exist, exiting"
    exit 1
  fi

  echo "--------------------------------------------------------------------------------------"
  echo "Data and files will be stored in ${backupDir}. You must take backups of this location."
  echo "--------------------------------------------------------------------------------------"
}


####################################################################################
#
# Installs Docker
#
####################################################################################
function installDocker() {
  curl -sSL https://get.docker.com/ | sh
  curl -L https://github.com/docker/compose/releases/download/1.7.0/docker-compose-`uname -s`-`uname -m` > /usr/bin/docker-compose
  chmod +x /usr/bin/docker-compose
  if [[ -f "/etc/redhat-release" ]]; then
    OS=`cat /etc/redhat-release`
    sudo mkdir /etc/systemd/system/docker.service.d
    sudo touch /etc/systemd/system/docker.service.d/docker.conf
    echo "[Service]
ExecStart=
ExecStart=/usr/bin/docker daemon -H fd:// --storage-opt dm.basesize=50G" > /etc/systemd/system/docker.service.d/docker.conf
    sudo systemctl daemon-reload
  fi
  sudo service docker start
}


####################################################################################
#
# Logs in to Docker
#
####################################################################################
function dockerLogin() {
  if [[ "$dockerUsername" = "" ]]; then
    read -p "Docker username: " dockerUsername
  fi

  if [[ "$dockerEmail" = "" ]]; then
    read -p "Docker email: " dockerEmail
  fi

  if [[ "$dockerPassword" = "" ]]; then
  	read  -s -p "Docker password: " dockerPassword
  fi

  sudo docker login -u $dockerUsername -e $dockerEmail -p $dockerPassword

  if [ $? -ne 0 ]; then
    echo "login failed, exiting."
    exit 1
  fi
}


####################################################################################
#
# Generates docker-compose.yml
#
####################################################################################
function createDockerComposeFile() {
  echo "Creating the docker-compose.yml file"
  needEnvFile=false
  if [[ "$databasePassword" != "" || "$mongoPassword" != "" || "$tomcatAdminPassword" != "" || "$defaultUserPassword" != "" || "$defaulUserApiToken" != "" ]]; then
    needEnvFile=true
  fi

  dockerComposeFile=$configDir/docker-compose.yml
  dockerEnvFile=$configDir/.docker-common.env
  mkdir -p $configDir
  sudo rm -f $dockerComposeFile
  sudo touch $dockerComposeFile

  if [[ $needEnvFile = true ]]; then
    sudo rm -f $dockerEnvFile
    sudo touch $dockerEnvFile
    if [[ "$databasePassword" != "" ]]; then
      echo "DATABASE_PASSWORD=$databasePassword" >> $dockerEnvFile
      echo "POSTGRES_PASSWORD=$databasePassword" >> $dockerEnvFile
    fi
    if [[ "$mongoPassword" != "" ]]; then
      echo "MONGODB_PASSWORD=$mongoPassword" >> $dockerEnvFile
    fi
    if [[ "$tomcatAdminPassword" != "" ]]; then
      echo "TOMCAT_PASSWORD=$tomcatAdminPassword" >> $dockerEnvFile
    fi
    if [[ "$defaultUserPassword" != "" ]]; then
      echo "ADMIN_USER_PASSWORD=$defaultUserPassword" >> $dockerEnvFile
    fi
    if [[ "$defaulUserApiToken" != "" ]]; then
      echo "ADMIN_API_TOKEN=$defaulUserApiToken" >> $dockerEnvFile
    fi
  fi

  # setup mongo data dir, postgres data dir files dir and backsup dir
  filesDir="${backupDir}/files"
  postgresBackupDir="${backupDir}/postgresBackups"
  mongoBackupDir="${backupDir}/mongoBackups"
  mongoDataDir="${backupDir}/mongoData"
  postgresDataDir="${backupDir}/postgresData"
  apachessl="${backupDir}/apachessl"
  geoserver="${backupDir}/geoserver"
  mkdir -p $filesDir $postgresBackupDir $mongoBackupDir $mongoDataDir $postgresDataDir $apachessl $geoserver

  HOST_MACHINE_HOST_NAME=`hostname -f`
  if [[ $spidaMin = true ]]; then
    echo "spidamin:
  image: spidasoftware/min:$tag
  restart: always
  volumes:
    - $filesDir:/var/lib/spida/files
    - $geoserver:/var/lib/spida/geoserver
  environment:
    - HOST_MACHINE_HOST_NAME=$HOST_MACHINE_HOST_NAME" >> $dockerComposeFile

    if [[ "$serverRoot" != "" ]]; then
      echo "    - SERVER_ROOT=$serverRoot" >> $dockerComposeFile
    fi

    if [[ $needEnvFile = true ]]; then
      echo "  env_file: $dockerEnvFile" >> $dockerComposeFile
    fi

    echo "  links:" >> $dockerComposeFile
    echo "    - redis" >> $dockerComposeFile
    if [[ $postrgresql = true ]]; then
      echo "    - postgresql" >> $dockerComposeFile
    fi
    if [[ $mongo = true ]]; then
      echo "    - mongodb" >> $dockerComposeFile
    fi
  fi

  if [[ $postrgresql = true ]]; then
    echo "postgresql:
  image: spidasoftware/postgresql
  restart: always
  volumes:
    - $postgresBackupDir:/backups
    - $postgresDataDir:/var/lib/postgresql/data" >> $dockerComposeFile
      if [[ $needEnvFile = true ]]; then
        echo "  env_file: $dockerEnvFile" >> $dockerComposeFile
      fi
  fi

  if [[ $mongo = true ]]; then
    echo "mongodb:
  image: spidasoftware/mongodb
  restart: always
  volumes:
    - $mongoBackupDir:/backups
    - $mongoDataDir:/data/db" >> $dockerComposeFile
      if [[ $needEnvFile = true ]]; then
        echo "  env_file: $dockerEnvFile" >> $dockerComposeFile
      fi
  fi

  if [[ $spidaMin = true ]]; then
    echo "redis:
  image: spidasoftware/redis
  restart: always" >> $dockerComposeFile

    echo "apache:
  image: spidasoftware/apache:$apacheTag
  restart: always
  links:
    - spidamin
  ports:
    - \"80:80\"
    - \"443:443\"
  volumes:
    - $apachessl:/var/lib/spida/apache_ssl
  environment:
    - HOST_MACHINE_HOST_NAME=$HOST_MACHINE_HOST_NAME" >> $dockerComposeFile

    if [[ "$serverRoot" != "" ]]; then
      echo "    - SERVER_ROOT=$serverRoot" >> $dockerComposeFile
    fi
  fi
}

####################################################################################
#
# Setup docker container log rotation
#
####################################################################################
function setupLogRotate() {
  sudo touch /etc/logrotate.d/docker-container
  echo "/var/lib/docker/containers/*/*.log {
  rotate 7
  daily
  compress
  size=1G
  missingok
  copytruncate
}" >> /etc/logrotate.d/docker-container
}
####################################################################################
#
# Execute above functions
#
####################################################################################
parseCommandLineArguments $@
installDocker
dockerLogin
createDockerComposeFile
setupLogRotate

sudo docker-compose -f $dockerComposeFile up -d
sudo docker logout
